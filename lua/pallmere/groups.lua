local function setup(palette)
	return {
		Normal = { fg = palette.text, bg = palette.base, },
		NormalFloat = { fg = palette.text, bg = palette.base, },
		Delimiter = { fg = palette.text, },
		WhiteSpace = { fg = palette.highlight, },
		Comment = { fg = palette.muted, italic = true, },
		Constant = { fg = palette.green, },
		String = { fg = palette.green, },
		Character = { fg = palette.yellow, },
		Number = { fg = palette.orange, },
		Boolean = { fg = palette.purple, },
		Float = { fg = palette.orange, },
		FloatBorder = { fg = palette.text, },
		Operator = { fg = palette.turqoise, },
		Keyword = { fg = palette.purple, },
		Keywords = { fg = palette.purple, },
		Identifier = { fg = palette.purple, },
		Function = { fg = palette.green, },
		Statement = { fg = palette.turqoise, },
		Conditional = { fg = palette.cyan, },
		Repeat = { fg = palette.cyan, },
		Label = { fg = palette.purple, },
		Exception = { fg = palette.turqoise, },
		PreProc = { fg = palette.green, },
		Include = { fg = palette.turqoise, },
		Define = { fg = palette.turqoise, },
		Title = { fg = palette.cyan, },
		Macro = { fg = palette.turqoise, },
		PreCondit = { fg = palette.purple, },
		Type = { fg = palette.purple, },
		StorageClass = { fg = palette.cyan, },
		Structure = { fg = palette.green, },
		TypeDef = { fg = palette.green, },
		Special = { fg = palette.yellow, italic = true },
		SpecialComment = { fg = palette.muted, italic = true, },
		Error = { fg = palette.red, },
		Todo = { fg = palette.turqoise, bold = true, italic = true, },
		Underlined = { fg = palette.purple, underline = true, },

		Cursor = { reverse = true, },
		CursorLineNr = { fg = palette.text, bg = palette.surface, bold = true, },

		SignColumn = { bg = palette.base, },

		Conceal = { fg = palette.muted, },
		CursorColumn = { bg = palette.surface, },
		CursorLine = { bg = palette.surface, },
		ColorColumn = { bg = palette.surface, },

		StatusLine = { fg = palette.text, bg = palette.dark, },
		StatusLineNC = { fg = palette.muted, },
		StatusLineTerm = { fg = palette.text, bg = palette.darker, },
		StatusLineTermNC = { fg = palette.muted, },

		Directory = { fg = palette.cyan, },
		DiffAdd = { fg = palette.base, bg = palette.yellow, },
		DiffChange = { fg = palette.orange, },
		DiffDelete = { fg = palette.red, },
		DiffText = { fg = palette.muted, },

		ErrorMsg = { fg = palette.red, },
		VertSplit = { fg = palette.highlight, },
		WinSeparator = { fg = palette.highlight, },
		Folded = { fg = palette.muted, },
		FoldColumn = {},
		Search = { fg = palette.darker, bg = palette.yellow, },
		IncSearch = { fg = palette.darker, bg = palette.orange, },
		CurSearch = { fg = palette.darker, bg = palette.turqoise },
		LineNr = { fg = palette.faint, },
		MatchParen = { fg = palette.darker, bg = palette.cyan, },
		NonText = { fg = palette.faint, },
		Pmenu = { fg = palette.text, bg = palette.surface, },
		PmenuSel = { fg = palette.dark, bg = palette.yellow, },
		PmenuSbar = { bg = palette.base, },
		PmenuThumb = { bg = palette.highlight, },

		Question = { fg = palette.turqoise, },
		QuickFixLine = { fg = palette.darker, bg = palette.green, },
		SpecialKey = { fg = palette.nontext, },

		SpellBad = { fg = palette.red, underline = true, },
		SpellCap = { fg = palette.green, },
		SpellLocal = { fg = palette.green, },
		SpellRare = { fg = palette.green, },

		TabLine = { fg = palette.muted, },
		TabLineSel = { fg = palette.text, },
		TabLineFill = { bg = palette.base, },
		Terminal = { fg = palette.text, bg = palette.darker, },
		Visual = { bg = palette.highlight, },
		VisualNOS = { fg = palette.surface, },
		WarningMsg = { fg = palette.orange, },
		WildMenu = { fg = palette.darker, bg = palette.text, },

		EndOfBuffer = { fg = palette.highlight, bg = palette.base, },

		-- TreeSitter
		['@error'] = { fg = palette.red, },
		['@punctuation.delimiter'] = { fg = palette.cyan, },
		['@punctuation.bracket'] = { fg = palette.cyan, },
		['@markup.list'] = { fg = palette.purple, },

		['@constant'] = { fg = palette.turqoise, },
		['@constant.builtin'] = { fg = palette.turqoise, },
		['@markup.link.label.symbol'] = { fg = palette.turqoise, },

		['@constant.macro'] = { fg = palette.purple, },
		['@string.regexp'] = { fg = palette.red, },
		['@string'] = { fg = palette.green, },
		['@string.escape'] = { fg = palette.purple, },
		['@string.special.symbol'] = { fg = palette.turqoise, },
		['@character'] = { fg = palette.yellow, },
		['@number'] = { fg = palette.turqoise, },
		['@boolean'] = { fg = palette.turqoise, },
		['@number.float'] = { fg = palette.yellow, },
		['@annotation'] = { fg = palette.green, },
		['@attribute'] = { fg = palette.purple, },
		['@module'] = { fg = palette.orange, },

		['@function.builtin'] = { fg = palette.purple, },
		['@function'] = { fg = palette.yellow, },
		['@function.macro'] = { fg = palette.yellow, },
		['@variable.parameter'] = { fg = palette.orange, },
		['@variable.parameter.reference'] = { fg = palette.orange, },
		['@function.method'] = { fg = palette.yellow, },
		['@variable.member'] = { fg = palette.orange, },
		['@property'] = { fg = palette.turqoise, },
		['@constructor'] = { fg = palette.purple, },

		['@keyword.conditional'] = { fg = palette.cyan, },
		['@keyword.repeat'] = { fg = palette.cyan, },
		['@label'] = { fg = palette.purple, },

		['@keyword'] = { fg = palette.cyan, },
		['@keyword.function'] = { fg = palette.purple, },
		['@keyword.function.ruby'] = { fg = palette.cyan, },
		['@keyword.operator'] = { fg = palette.cyan, },
		['@operator'] = { fg = palette.cyan, },
		['@keyword.exception'] = { fg = palette.turqoise, },
		['@type'] = { fg = palette.purple, },
		['@type.builtin'] = { fg = palette.purple, italic = true, },
		['@type.qualifier'] = { fg = palette.cyan, },
		['@structure'] = { fg = palette.turqoise, },
		['@keyword.include'] = { fg = palette.cyan, },

		['@variable'] = { fg = palette.text, },
		['@variable.builtin'] = { fg = palette.turqoise, },

		['@markup'] = { fg = palette.orange, },
		['@markup.strong'] = { fg = palette.orange, bold = true, }, -- bold
		['@markup.emphasis'] = { fg = palette.green, italic = true, }, -- italic
		['@markup.underline'] = { fg = palette.orange, },
		['@markup.heading'] = { fg = palette.cyan, bold = true, },
		['@markup.raw'] = { fg = palette.green, }, -- inline code
		['@markup.link.url'] = { fg = palette.cyan, italic = true, },
		['@markup.link'] = { fg = palette.orange, bold = true, },

		['@tag'] = { fg = palette.purple, },
		['@tag.attribute'] = { fg = palette.turqoise, },
		['@tag.delimiter'] = { fg = palette.text, },

		-- LSP
		DiagnosticError = { fg = palette.red, },
		DiagnosticWarn = { fg = palette.orange, },
		DiagnosticInfo = { fg = palette.cyan, },
		DiagnosticHint = { fg = palette.cyan, },
		DiagnosticUnderlineError = { undercurl = true, sp = palette.red, },
		DiagnosticUnderlineWarn = { undercurl = true, sp = palette.orange, },
		DiagnosticUnderlineInfo = { undercurl = true, sp = palette.cyan, },
		DiagnosticUnderlineHint = { undercurl = true, sp = palette.cyan, },
		DiagnosticSignError = { fg = palette.red, },
		DiagnosticSignWarn = { fg = palette.orange, },
		DiagnosticSignInfo = { fg = palette.cyan, },
		DiagnosticSignHint = { fg = palette.cyan, },
		DiagnosticFloatingError = { fg = palette.red, },
		DiagnosticFloatingWarn = { fg = palette.orange, },
		DiagnosticFloatingInfo = { fg = palette.cyan, },
		DiagnosticFloatingHint = { fg = palette.cyan, },
		DiagnosticVirtualTextError = { fg = palette.red, },
		DiagnosticVirtualTextWarn = { fg = palette.orange, },
		DiagnosticVirtualTextInfo = { fg = palette.cyan, },
		DiagnosticVirtualTextHint = { fg = palette.cyan, },

		LspDiagnosticsDefaultError = { fg = palette.red, },
		LspDiagnosticsDefaultWarning = { fg = palette.orange, },
		LspDiagnosticsDefaultInformation = { fg = palette.cyan, },
		LspDiagnosticsDefaultHint = { fg = palette.cyan, },
		LspDiagnosticsUnderlineError = { fg = palette.red, undercurl = true, },
		LspDiagnosticsUnderlineWarning = { fg = palette.orange, undercurl = true, },
		LspDiagnosticsUnderlineInformation = { fg = palette.cyan, undercurl = true, },
		LspDiagnosticsUnderlineHint = { fg = palette.cyan, undercurl = true, },
		LspReferenceText = { fg = palette.orange, },
		LspReferenceRead = { fg = palette.orange, },
		LspReferenceWrite = { fg = palette.orange, },
		LspCodeLens = { fg = palette.cyan, },
		LspInlayHint = { fg = palette.darker, bg = palette.faint },

		-- NvimTree
		NvimTreeNormal = { bg = palette.dark },
		NvimTreeEndOfBuffer = { fg = palette.dark, },
		NvimTreeWinSeparator = { fg = palette.highlight },

		-- gitsigns
		GitSignsAdd = { fg = palette.green, },
		GitSignsChange = { fg = palette.yellow, },
		GitSignsDelete = { fg = palette.red, },
		GitSignsAddLn = { fg = palette.crust, bg = palette.green, },
		GitSignsChangeLn = { fg = palette.crust, bg = palette.yellow, },
		GitSignsDeleteLn = { fg = palette.crust, bg = palette.red, },
		GitSignsCurrentLineBlame = { fg = palette.text, },
	}
end

return {
	setup = setup
}
